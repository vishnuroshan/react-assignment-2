{"version":3,"sources":["Validator/Validator.js","Char/Char.js","App.js","serviceWorker.js","index.js"],"names":["Validator","props","char","characters","length","Char","className","onClick","delete","character","App","state","string","seperated","onInputHandler","event","setState","target","value","split","deletehandler","index","arr","filter","e","i","join","type","onChange","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAceA,G,MAZG,SAACC,GACf,IAAIC,EAQJ,OAPID,EAAME,WACFF,EAAME,WAAWC,OAAS,GAC1BF,EAAO,wCACFD,EAAME,WAAWC,OAAS,IAC/BF,EAAO,0CACRA,EAAO,KAEP,6BAAMA,KCPFG,G,MAFF,SAACJ,GAAD,OAAW,wBAAIK,UAAU,OAAOC,QAASN,EAAMO,QAASP,EAAMQ,aCoC5DC,E,4MAhCbC,MAAQ,CACNC,OAAQ,GACRC,UAAW,I,EAGbC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEJ,OAAQG,EAAME,OAAOC,MAAOL,UAAWE,EAAME,OAAOC,MAAMC,MAAM,O,EAGlFC,cAAgB,SAACC,GACf,IAAIC,EAAM,EAAKX,MAAME,UAAUU,QAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMJ,KACtD,EAAKL,SAAS,CAAEJ,OAAQU,EAAII,KAAK,IAAKb,UAAWS,K,uDAGzC,IAAD,OACP,OACE,yBAAKhB,UAAU,OACb,6BACE,gDAGA,2BAAOqB,KAAK,OAAOC,SAAUC,KAAKf,eAAgBI,MAAOW,KAAKlB,MAAMC,SACpE,kBAAC,EAAD,CAAUT,WAAY0B,KAAKlB,MAAMC,SAChCiB,KAAKlB,MAAMC,OAAOO,MAAM,IAAIW,KAAI,SAAC5B,EAAMmB,GACtC,OAAO,kBAAC,EAAD,CAAMb,OAAQ,kBAAM,EAAKY,cAAcC,IAAQZ,UAAWP,EAAM6B,IAAKV,a,GAzBtEW,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9ae1d0d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Validator = (props) => {\n    let char;\n    if (props.characters) {\n        if (props.characters.length > 10)\n            char = <h3>too long</h3>\n        else if (props.characters.length < 5)\n            char = <h3>too small</h3>\n    } else char = null;\n\n    return <div>{char}</div>\n};\n\nexport default Validator;","import React from 'react';\nimport './Char.css';\nconst Char = (props) => <h3 className=\"char\" onClick={props.delete}>{props.character}</h3>\n\nexport default Char;","import React, { Component } from 'react';\nimport './App.css';\nimport Validate from './Validator/Validator';\nimport Char from './Char/Char';\n\nclass App extends Component {\n  state = {\n    string: '',\n    seperated: []\n  };\n\n  onInputHandler = (event) => {\n    this.setState({ string: event.target.value, seperated: event.target.value.split('') });\n  };\n\n  deletehandler = (index) => {\n    let arr = this.state.seperated.filter((e, i) => i !== index);\n    this.setState({ string: arr.join(''), seperated: arr });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <h1>\n            char seperator!!\n          </h1>\n          <input type=\"text\" onChange={this.onInputHandler} value={this.state.string}></input>\n          <Validate characters={this.state.string} />\n          {this.state.string.split('').map((char, index) => {\n            return <Char delete={() => this.deletehandler(index)} character={char} key={index} />\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}